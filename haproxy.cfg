# HAProxy SNI + HTTP transparent proxy (no TLS termination)
# Routes TLS by SNI and HTTP by Host header using public DNS resolvers.
# Requirements: HAProxy 2.4+ (haproxy:lts is fine).

global
    log stdout format raw local0
    daemon

defaults
    log     global
    mode    tcp
    option  dontlognull
    timeout connect 5s
    timeout client  60s
    timeout server  60s

# Public DNS resolvers to route upstream destinations
resolvers public
    nameserver cflr 1.1.1.1:53
    nameserver quad 9.9.9.9:53
    nameserver ggle 8.8.8.8:53
    resolve_retries 3
    timeout resolve 3s
    timeout retry   1s
    hold valid 10s

# -------- TLS (443) by SNI --------
frontend fe_tls
    bind :443
    mode tcp

    # Inspect TLS ClientHello to read SNI
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }

    # Extract SNI and resolve to IPv4, then set destination dynamically
    tcp-request content set-var(txn.sni) req.ssl_sni
    tcp-request content set-dst %[var(txn.sni),lower,resolve(3000,public,ipv4)] if { var(txn.sni) -m found }

    default_backend be_tls

backend be_tls
    mode tcp
    # Destination IP is set dynamically by 'set-dst'
    server dyn 0.0.0.0:443

# -------- HTTP (80) by Host --------
frontend fe_http
    bind :80
    mode http

    # Resolve Host header (strip optional :port) and set destination
    http-request set-dst hdr(Host),field(1,:),lower,resolve(3000,public,ipv4) if { hdr(Host) -m found }

    default_backend be_http

backend be_http
    mode tcp
    server dyn 0.0.0.0:80
