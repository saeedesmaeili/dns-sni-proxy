# HAProxy SNI + HTTP transparent proxy (no TLS termination)
# Using do-resolve + set-dst (compatible with HAProxy 2.x/3.x)

global
    log stdout format raw local0
    daemon

defaults
    log     global
    mode    tcp
    option  dontlognull
    timeout connect 5s
    timeout client  60s
    timeout server  60s

resolvers public
    nameserver cflr 1.1.1.1:53
    nameserver quad 9.9.9.9:53
    nameserver ggle 8.8.8.8:53
    resolve_retries 3
    timeout resolve 3s
    timeout retry   1s
    hold valid 10s

# -------- TLS (443) by SNI --------
frontend fe_tls
    bind :443
    mode tcp

    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }

    # Resolve the SNI to IPv4 and set destination
    tcp-request content do-resolve(txn.sni_ip,public,ipv4) req.ssl_sni
    tcp-request content set-dst var(txn.sni_ip) if { var(txn.sni_ip) -m found }

    default_backend be_tls

backend be_tls
    mode tcp
    # Actual destination is set dynamically by set-dst
    server dyn 0.0.0.0:443

# -------- HTTP (80) by Host --------
frontend fe_http
    bind :80
    mode http

    # Extract host (strip :port), resolve to IPv4, set destination
    http-request do-resolve(txn.host_ip,public,ipv4) hdr(Host),field(1,:)
    http-request set-dst var(txn.host_ip) if { var(txn.host_ip) -m found }

    default_backend be_http

backend be_http
    mode tcp
    server dyn 0.0.0.0:80
